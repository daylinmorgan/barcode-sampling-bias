[{"name": "app.py", "content": "from shiny import App, reactive, render, ui\nimport numpy as np\nimport pandas as pd\nfrom string import ascii_uppercase\nimport matplotlib.pyplot as plt\n\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Barcode Sampling Bias\"),\n    ui.row(\n        ui.column(\n            2,\n            ui.input_numeric(\n                \"diversity\", \"Starting Number of Barcodes:\", 1000, min=10, max=10000\n            ),\n            ui.input_numeric(\"k\", \"Carrying Capacity:\", 6e6, min=1, max=1e7),\n            ui.input_numeric(\"outgrowth\", \"Cells Post Sort:\", 6e6, min=1, max=1e7),\n            ui.input_numeric(\"mu\", \"Mean Growth Rate (1/d):\", 1, min=0.1, max=100),\n            ui.input_numeric(\n                \"sigma\", \"Std. Dev. Growth Rate (1/d):\", 0.1, min=0.01, max=100\n            ),\n        ),\n        ui.column(\n            2,\n            ui.input_numeric(\"passage_num\", \"Number of Passages:\", 5, min=1, max=100),\n            ui.input_numeric(\n                \"days_per_passage\", \"Days per Passages:\", 5, min=1, max=100\n            ),\n            ui.input_numeric(\n                \"seeding_num\", \"Cells Seed per Passage:\", 1e6, min=1, max=1e7\n            ),\n            ui.input_numeric(\"seed\", \"Seed:\", 9),\n            ui.output_text_verbatim(\"final_lineage_num\"),\n            ui.output_text_verbatim(\"time_to_outgrown\"),\n        ),\n        ui.column(\n            8,\n            ui.output_plot(\"plot\"),\n        ),\n    ),\n)\n\n\ndef generate_barcodes(start_num):\n    num_letters = int(np.ceil(np.log(start_num) / np.log(26)))\n    return [\n        \"\".join([ascii_uppercase[int(j)] for j in list(str(i).zfill(num_letters))])\n        for i in range(start_num)\n    ]\n\n\ndef generate_growth_rates(barcodes, growth_mean, growth_stddev, seed):\n    rng = np.random.default_rng(seed)\n    growth_rates = rng.normal(loc=growth_mean, scale=growth_stddev, size=len(barcodes))\n\n    return {lineage: g for lineage, g in zip(barcodes, growth_rates)}\n\n\ndef logistic_growth(g, K, N0, t):\n    return K / (1 + ((K - N0) / N0) * np.exp(-1 * g * t))\n\n\ndef exponential_growth(g, N0, t):\n    return N0 * np.exp(g * t)\n\n\ndef sort_outgrow(growth_rates, total_outgrowth):\n    \"\"\"expand population exponentially\"\"\"\n    abundances = {barcode: 1 for barcode in growth_rates}\n    total = sum(abundances.values())\n    # TODO: don't brute force this...\n    # get number of days with intrinsic growth rate\n\n    t = 0\n    interval = 1\n    while total < total_outgrowth:\n        for barcode, g in growth_rates.items():\n            abundances[barcode] = exponential_growth(g, 1, t)\n        t += interval\n        total = sum(abundances.values())\n\n    return abundances, t\n\n\ndef sample(abundances, total, seeding_num, seed):\n    \"\"\"subsample the population to simulate passaging\"\"\"\n    rng = np.random.default_rng(seed)\n    barcodes = list(abundances.keys())\n    proportions = list(abundances.values()) / total\n    subsampled = {\n        barcodes: counts\n        for barcodes, counts in zip(\n            *np.unique(\n                rng.choice(barcodes, int(seeding_num), p=proportions),\n                return_counts=True,\n            )\n        )\n    }\n    return subsampled\n\n\ndef grow(\n    growth_rates,\n    outgrowth,\n    days_per_passage,\n    carrying_capacity,\n    passage_num,\n    seeding_num,\n    seed,\n):\n    passages = [np.linspace(0, days_per_passage, 100)] * passage_num\n    x, y = [], []\n    start = sample(outgrowth, sum(outgrowth.values()), seeding_num, seed)\n\n    abundances = start.copy()\n    total = sum(abundances.values())\n    for passage, time in enumerate(passages):\n        for t in time:\n            x.append(t + passage * days_per_passage)\n            K = {\n                barcode: carrying_capacity * abundance / total\n                for barcode, abundance in abundances.items()\n            }\n            for barcode, g in growth_rates.items():\n                if barcode in abundances:\n                    abundances[barcode] = logistic_growth(\n                        g, K[barcode], start[barcode], t\n                    )\n\n            total = sum(abundances.values())\n            y.append(total)\n\n        # subsample the population\n        abundances = sample(abundances, total, seeding_num, seed)\n        start = abundances.copy()\n\n    return x, y, abundances\n\n\ndef simulate(input):\n    barcodes = generate_barcodes(start_num=input.diversity())\n    growth_rates = generate_growth_rates(\n        barcodes, growth_mean=input.mu(), growth_stddev=input.sigma(), seed=input.seed()\n    )\n    outgrowth, time_to_outgrown = sort_outgrow(growth_rates, input.outgrowth())\n    x, y, abundances = grow(\n        growth_rates,\n        outgrowth,\n        days_per_passage=input.days_per_passage(),\n        carrying_capacity=input.k(),\n        passage_num=input.passage_num(),\n        seeding_num=input.seeding_num(),\n        seed=input.seed(),\n    )\n\n    return x, y, time_to_outgrown, abundances\n\n\n# %%\n\n\ndef get_max_barcode(abundances):\n    return (\n        pd.DataFrame(abundances.items(), columns=[\"barcode\", \"cells\"])\n        .sort_values(\"cells\", ascending=False)\n        .iloc[0][\"barcode\"]\n    )\n\n\ndef server(input, output, session):\n    @reactive.Calc\n    def run_simulation():\n        return simulate(input)\n\n    @output\n    @render.text\n    def time_to_outgrown():\n        *_, t, _ = run_simulation()\n        return t\n\n    @output\n    @render.plot\n    def plot():\n        x, y, *_ = run_simulation()\n        fig, ax = plt.subplots()\n        ax.plot(x, y)\n        ax.set(xlabel=\"time (days)\", ylabel=\"N (cells)\")\n        return fig\n\n    @output\n    @render.text\n    def final_lineage_num():\n        *_, abundances = simulate(input)\n        return f\"Final # of lineages -> {len(abundances)}\\nWinning Lineage: {get_max_barcode(abundances)}\"\n\n\napp = App(app_ui, server)\n", "type": "text"}]